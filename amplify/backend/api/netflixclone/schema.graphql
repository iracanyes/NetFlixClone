# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!


type Category
@model {
  id: ID! @primaryKey(sortKeyFields: ["title"])
  title: String!

  categoryMovies: [MovieCategory] @hasMany(indexName:"byCategory", fields:["id"])
  categorySeries: [SerieCategory] @hasMany(indexName:"byCategory", fields:["id"])
}

type Movie
@model
{
  id: ID! @primaryKey(sortKeyFields: ["title"])
  title: String!
  poster: String!
  year: Int
  numberOfSeasons: Int

  # Synopsis
  plot: String
  # Casting
  cast: String
  creator: String

  trailer: String
  video: String

  movieCategories: [MovieCategory] @hasMany(fields:["id"])
  watched: [Watched] @hasMany(fields:["id"])
  seasons: [Season] @hasMany(fields: ["id"])
}

type Serie
@model
{
  id: ID! @primaryKey(sortKeyFields: ["title"])
  title: String!
  poster: String!
  year: Int
  numberOfSeasons: Int

  # Synopsis
  plot: String
  # Casting
  cast: String
  creator: String

  trailer: String
  video: String

  serieCategories: [SerieCategory] @hasMany(fields:["id"])
  watched: [Watched] @hasMany(fields:["id"])
  seasons: [Season] @hasMany(indexName: "bySerie", fields: ["id"])
}

type MovieCategory
@model
{
  id: ID! @primaryKey
  categoryID: ID! @index(name:"byCategory", sortKeyFields:["movieID"])
  movieID: ID! @index(name:"byMovie", sortKeyFields:["categoryID"])

  category: Category @belongsTo(fields:["categoryID"])
  movie: Movie @belongsTo(fields:["movieID"])
}

type SerieCategory
@model
{
  id: ID! @primaryKey
  categoryID: ID! @index(name:"byCategory", sortKeyFields:["serieID"])
  serieID: ID! @index(name:"bySerie", sortKeyFields:["categoryID"])

  category: Category @belongsTo(fields:["categoryID"])
  serie: Serie @belongsTo(fields:["serieID"])
}

type Season
@model
{
  id: ID! @primaryKey(sortKeyFields: ["name"])
  name: String!

  movieID: ID @index(name:"byMovie", sortKeyFields: ["name"])
  movie: Movie @belongsTo(fields: ["movieID"])


  serieID: ID @index(name:"bySerie", sortKeyFields:["name"])
  serie: Serie @belongsTo(fields:["serieID"])

  episodes: [Episode] @hasMany(indexName: "bySeason", fields: ["id"])
}

type Episode
@model
{
  id: ID! @primaryKey(sortKeyFields:["title"])
  title: String!
  poster: String!
  duration: String!
  # Synopsis
  plot: String
  video: String!

  seasonID: ID! @index(name:"bySeason", sortKeyFields: ["title"])
  season: Season @belongsTo(fields: ["seasonID"])
}

type User
@model
{
  id: ID! @primaryKey(sortKeyFields:["email"])
  username: String!
  name: String
  email: String!
  accountType: String
  status: String
  image: String
  watched: [Watched] @hasMany(indexName: "byUser", fields: ["id"])
}

type Watched
@model
{
  id: ID! @primaryKey

  userID: ID! @index(name:"byUser", sortKeyFields:["id"])
  user: User @belongsTo(fields:["userID"])

  movieID: ID @index(name:"byMovie", sortKeyFields:["userID"])
  movie: Movie @belongsTo(fields:["movieID"])

  serieID: ID @index(name:"bySerie", sortKeyFields:["userID"])
  serie: Serie @belongsTo(fields:["serieID"])

}




##############
# Example
##############
#type Task
#  @model
#  @auth(
#    rules: [
#      { allow: groups, groups: ["Managers"], queries: null, mutations: [create, update, delete] }
#      { allow: groups, groups: ["Employees"], queries: [get, list], mutations: null }
#    ]
#  ) {
#  id: ID!
#  title: String!
#  description: String
#  status: String
#}
#type PrivateNote @model @auth(rules: [{ allow: owner }]) {
#  id: ID!
#  content: String!
#}
